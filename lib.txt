let vector = {
    _x: 0,
    _y: 0,

    create: function(x, y){
        var obj = Object.create(this);
        obj.setX(x);
        obj.setY(y);
        return obj;
    },

    getX: function(){
        return this._x;
    },

    getY: function(){
        return this._y;
    },

    setX: function(val){
        this._x = val;
    },

    setY: function(val){
        this._y = val;
    },

    setAngle: function(angle){
        var length = this.getLength();
        this._x = Math.cos(angle) * length;
        this._y = Math.sin(angle) * length;
    },

    getAngle: function(){
        return Math.atan2(this._y, this._x);
    },

    setLength: function(length){
        var angle = this.getAngle();
        this._x = Math.cos(angle) * length;
        this._y = Math.sin(angle) * length;
    },

    getLength: function(){
        return Math.sqrt(this._x * this._x + this._y * this._y);
    },

    add: function(v2){
        return vector.create(this._x + v2.getX(), this._y + v2.getY());
    },

    subtract: function(v2){
        return vector.create(this._x - v2.getX(), this._y - v2.getY());
    },

    multiply: function(val){
        return vector.create(this._x * val, this._y * val);
    },

     devide: function(val){
         return vector.create(this._x / val, this._y / val);
     },

     addTo: function(v2){
         this._x += v2.getX();
         this._y += v2.getY();
     },

     subtractTo: function(v2){
         this._x -= v2.getX();
         this._y -= v2.getY();
     },

     multiplyTo: function(val){
         this._x *= val;
         this._y *= val;
     },

     devideTo: function(val){
         this._x /= val;
         this._y /= val;
     }

}






let particle = {
    position: null,
    velocity: null,

    create: function(x, y, spee, direction){
        let obj = Object.create(this);

        obj.position = vector.create(x, y);
        obj.velocity = vector.create(0, 0);
        obj.velocity.setLength(spee);
        obj.velocity.setAngle(direction);
        return obj;
    },

    update: function(){
        this.position.addTo(this.velocity);
    }
}

//p2

  let particle = {
    position: null,
    velocity: null,
    gravity: null,

    create: function(x, y, speed, direction, grav){
        let obj = Object.create(this);

        obj.position = vector.create(x, y);
        obj.velocity = vector.create(0, 0);
        obj.velocity.setLength(speed);
        obj.velocity.setAngle(direction);
        obj.gravity = vector.create(0 , grav || 0);
        return obj
    },

    accelerate: function(accel){
        this.velocity.addTo(accel);
    },

    update: function(){
        this.position.addTo(this.velocity);
        this.velocity.addTo(this.gravity);
    }
}






main.js


let canvas = document.getElementById('canvas');
let context = canvas.getContext('2d');
let width = canvas.width = window.innerWidth;
let height = canvas.height = window.innerHeight;

//key code 38 up, 40 down, 37 left, 39 right

let p = particle.create(width / 2, height / 2, 4, Math.random() * Math.PI * 2);
p.radius = 20;


function update(){
    context.clearRect(0, 0, width, height);
    
    p.update();
    context.beginPath();
    context.arc(p.position.getX(), p.position.getY(), p.radius, 0, Math.PI * 2, false);
    context.fill();

    if(p.position.getX() - p.radius  > width){
        p.position.setX(-p.radius);
    }else if(p.position.getX() + p.radius < 0){
        p.position.setX(width + p.radius);
    }
    if(p.position.getY() - p.radius > height){
        p.position.setY(-p.radius);
    }else if(p.position.getY() + p.radius < 0){
        p.position.setY(height + p.radius);
    }

    requestAnimationFrame(update);
}

update();



//remove js 

let canvas = document.getElementById('canvas');
let context = canvas.getContext('2d');
let width = canvas.width = window.innerWidth;
let height = canvas.height = window.innerHeight;

//key code 38 up, 40 down, 37 left, 39 right

let particleArr = [];
p = particle.radius = 20;
//let p = particle.create(width / 2, height / 2, 4, Math.random() * Math.PI * 2);

for(let i = 0; i < 100; i++){
    particleArr.push(particle.create(width / 2, height / 2, Math.random() * 5 + 2, Math.random() * Math.PI * 2));
}


function update(){
    context.clearRect(0, 0, width, height);
    console.log(particleArr.length);
    
    for(let i = 0; i < particleArr.length; i++){
        let p = particleArr[i];
        p.update();
        context.beginPath();
        context.arc(p.position.getX(), p.position.getY(), p.radius, 0, Math.PI * 2, false);
        context.fill();
    }

    removeDeadParticles();

    requestAnimationFrame(update);
}

function removeDeadParticles(){
    for(let i = 0; i < particleArr.length; i++){
        let p = particleArr[i];
        if(p.position.getX() - p.radius > width || 
           p.position.getX() + p.radius < 0 ||
           p.position.getY() - p.radius > height ||
           p.position.getY() + p.radius < 0){
               particleArr.slice(i, 1);               
           }
    }
}


update();




particle-----------------particle-----------------particle-----------------


let particle = {
    position: null,
    velocity: null,
    gravity: null,
    mass: 1,
    radius: 0,
    bounce: -1,

    create: function(x, y, speed, direction, grav){
        let obj = Object.create(this);
        obj.position = vector.create(x, y);
        obj.velocity = vector.create(0, 0);
        obj.velocity.setLength(speed);
        obj.velocity.setAngle(direction);
        obj.gravity = vector.create(0, grav || 0);
        return obj;
    },

    accelerate: function(accel){
        this.velocity.addTo(accel);
    },

    update: function(){
        this.position.addTo(this.velocity);
        this.velocity.addTo(this.gravity)
    },

    angleTo: function(p2){
        return Math.atan2(p2.position.getY() - this.position.getY(), p2.position.getX() - this.position.getX());
    },

    distanceTo: function(p2){
        let dx = p2.position.getX() - this.position.getX();
        let dy = p2.position.getY() - this.position.getY();
        return Math.sqrt(dx * dx + dy * dy);
    },

    gravitatedTo: function(p2){
        let grav = vector.create(0, 0);
        let dist = this.distanceTo(p2);

        grav.setLength(p2.mass / (dist * dist));
        grav.setAngle(this.angleTo(p2));

        this.velocity.addTo(grav);
    },

    circleCollision: function(c0, c1){
        
    }
}